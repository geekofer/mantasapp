<?php

namespace AppBundle\Repository;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * query for admin paginator
     *
     * @return QueryBuilder
     */
    public function getAllOrders()
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select(['o', 'c'])
            ->from('AppBundle:Order', 'o')
            ->leftJoin('o.customer', 'c')
            ->addOrderBy('o.date', 'DESC');

        return $qb;
    }

    /**
     * @return object[]
     */
    public function getTotalByStatus($status)
    {
        $qb = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('SUM(o.total) as total_paid')
                ->from('AppBundle:Order', 'o')
                ->where('o.status = :status')
                ->setParameter('status', $status);

        return $qb->getQuery()->getResult();
    }

     /**
     * return query to get users orders
     *
     * @return QueryBuilder
     */
    public function getCustomerOrders($customer)
    {
        $qb = $this->getEntityManager()
        ->createQueryBuilder()
        ->select(['o', 'c'])
        ->from('AppBundle:Order', 'o')
        ->leftJoin('o.customer', 'c')
        ->where('o.customer = :customer')
        ->setParameter('customer', $customer)
        ->addOrderBy('o.date', 'DESC');

        return $qb;
    }

     /**
     * @return object[]
     */
    public function getTotalByCustomer($status, $customer)
    {
        $qb = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('SUM(o.total) as total_paid')
                ->from('AppBundle:Order', 'o')
                ->where('o.status = :status')
                ->andWhere('o.customer = :customer')
                ->setParameter('status', $status)
                ->setParameter('customer', $customer);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
